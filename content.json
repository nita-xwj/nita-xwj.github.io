[{"title":"Javascript学习笔记-数据类型及转换，操作符","date":"2017-03-10T06:43:24.000Z","path":"2017/03/10/js-learning-day01/","text":"数据类型及转换1、undefined类型12var exam; // 声明了变量，但未赋值var exam_1 = undefined ; // 显示赋值了undefined 上面两个exam变量的类型均为undefined 2、null类型123var exam = null; // 显示声明null类型变量alert(typeof exam); // Object 因为null会被看成空的对象，所以返回Object。alert(null == undefined); // true 因为undefined是派生自null。 只要意在保存对象的变量还没有保存对象，就应该让该变量保存null值。 3、Boolean类型12345var exam = true; // 显示声明数据转换：alert(Boolean(&quot;str&quot;)); // true 非空字符串会转换为truealert(Boolean(123)); // true 非零数字之会转换为truealert(Boolean(Object)); // true 任何非空对象会转换为true 控制语句中存在自动执行Boolean转换。 4、Number类型1234567891011var exam = 123; // 显示声明var exam_1 = 070; // exam_1为八进制56var exam_2 = 090; // exam_2为10进制90，因为不符合八进制规则var exam_float = 1.; // 小数点后没有数字，解析为整数1var exam_float_1 = 10.0; // 小数点后为0，解析为整数10数据转换：var num = Number(&quot;123fhuwf&quot;); // 123var num1 = Number(&quot;hello world&quot;); // NaNvar num4 = Number(&quot;&quot;); // 0var num3 = Number(null); // 0var num4 = Number(undefined); // NaN 浮点数占用的内存空间是整数的两倍，因为会自动的将10.0，1.这类的浮点数转换为整数。Number()转换比较复杂而且不够合理，因此转换的时候大多使用ParseInt()函数。ParseInt()可以指定第二个参数作为转换基数，例如ParseInt(“10”,2)，则会转换成相应的二进制。 5、String类型123var exam = &quot;hello world&quot;; // 显示声明var str = &quot;Java&quot;;var str = str + &quot;script&quot;; // 这两行代码的底层实现为：先创建一个可以容纳10个字符的新字符串，然后将&quot;Java&quot;和&quot;script&quot;两个字符串填充到新的字符串中，然后销毁原来的字符串。 字符串一旦创建，就不可改变。若要改变某个字符串，首先要销毁原字符串，然后创建一个新的字符串来填充该变量，这些是在底层完成。 6、Object类型123var exam = new Object(); // 显示声明exam.toString(); // 返回对象的字符串表示exam.valueOf(); // 返回对象字符串，数值或布尔值表示 操作符1、布尔操作符1234567891011121314逻辑与：var exam = true;var result = (exam &amp;&amp; noDefined); // 会发生错误alert(result); // 这里不会执行var exam = false;var result = (exam &amp;&amp; noDefined); // 不会发生错误alert(result); // false逻辑或：var exam = false;var result = (exam &amp;&amp; noDefined); // 会发生错误alert(result); // 这里不会执行var exam = true;var result = (exam &amp;&amp; noDefined); // 不会发生错误alert(result); // true 某些情况下代码中含未定义变量会出错，某些情况则不会，要分清情况具体分析。 2、加性操作符1var result = 5 + &quot;5&quot;; // 55 整数值被转换成了字符串 3、关系操作符123var result = &quot;Brick&quot; &lt; &quot;awqf&quot;; // true 大写字母的编码值小于小写字母var result = &quot;23&quot; &lt; &quot;3&quot;; // true 字符2的编码值小于字符3的编码值var result = &quot;23&quot; &lt; 3; // false &quot;23&quot;会被转换成整数值23 4、相等操作符12var result = (&quot;123&quot; == 123); // true var result = (&quot;123&quot; === 123); // false “==”是相等符号，比较时会先将比较的对象转换成相同的类型，然后进行比较。”===”是全等的符号，比较时不会转换类型，因此类型不同的结果一定是false。 5、条件操作符1var result = boolean_expreesion ? true_value : false_value;","tags":[{"name":"js-learning-day01","slug":"js-learning-day01","permalink":"http://nita-xwj.github.io/tags/js-learning-day01/"}]},{"title":"Hello World","date":"2017-02-27T12:35:24.960Z","path":"2017/02/27/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]